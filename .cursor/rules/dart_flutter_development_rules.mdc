---
alwaysApply: true

# Dart/Flutter 開発ルール

## 1. 非推奨メソッドの使用禁止

### withOpacity の使用禁止
- `withOpacity()` メソッドは非推奨です
- 代わりに `withValues(alpha: value)` を使用してください
- 例: `Colors.black.withOpacity(0.1)` → `Colors.black.withValues(alpha: 0.1)`

### TextInputType.numberWithOptions の正しい使用
- `TextInputType.numberWithOptions` は関数です
- 比較時は `TextInputType.numberWithOptions()` として呼び出してください
- 例: `keyboardType == TextInputType.numberWithOptions()` 

## 2. ログ出力の統一

### print 文の使用禁止
- 本番コードでは `print()` を使用しないでください
- 代わりに `dart:developer` の `log()` を使用してください
- 例: `print('message')` → `developer.log('message', name: 'ClassName')`

### ログの命名規則
- ログ名はクラス名または機能名を使用
- 日本語のデバッグメッセージは維持
- エラーログには `error: e` パラメータを追加

## 3. マップリテラルの重複キー防止

### ルート定義の重複チェック
- `routes` マップ内で同じキーを複数回定義しないでください
- 重複するルート定義は削除してください
- 例: `/analytics` や `/group_required` の重複定義を避ける

## 4. 型安全性の確保

### 型比較の注意
- 関数とオブジェクトの比較を避けてください
- 関数を呼び出してから比較してください
- 例: `keyboardType == TextInputType.numberWithOptions()` は正しい

### null 安全性
- null チェックを適切に行ってください
- `?.` 演算子を活用してください
- 例: `value?.someMethod()` または `value ?? defaultValue`

## 5. 未使用コードの管理

### 未使用メソッドの削除
- 使用されていないメソッドは削除してください
- 一時的にコメントアウトする場合は理由を明記してください
- 例: `// TODO: 後で実装予定` または `// FIXME: 要修正`

## 6. インポート文の整理

### 必要なインポートの追加
- 使用するライブラリは適切にインポートしてください
- 例: `dart:developer` のインポートが必要な場合は追加

### 未使用インポートの削除
- 使用していないインポートは削除してください
- IDE の警告に従って整理してください

## 7. エラーハンドリング

### try-catch ブロックの適切な使用
- 非同期処理には適切なエラーハンドリングを実装してください
- エラーログには詳細な情報を含めてください
- 例: `developer.log('エラーメッセージ: $e', name: 'ClassName', error: e)`

## 8. コードフォーマット

### 一貫したインデント
- 2スペースのインデントを使用してください
- 一貫したフォーマットを維持してください

### 適切な改行
- 長い行は適切に改行してください
- 可読性を重視してください

## 9. パフォーマンス最適化

### 不要な再レンダリングの防止
- `setState()` の呼び出しを最小限にしてください
- 適切なキーを使用してください

### メモリリークの防止
- コントローラーやサブスクリプションは適切に破棄してください
- `dispose()` メソッドでリソースをクリーンアップしてください

## 10. セキュリティ

### 機密情報の保護
- API キーやパスワードは適切に暗号化してください
- 環境変数を使用してください
- 例: `.env` ファイルの使用

## 11. テスト

### エラーケースのテスト
- エラーが発生しやすい箇所はテストしてください
- 境界値テストを実装してください

## 12. ドキュメント

### コメントの追加
- 複雑なロジックにはコメントを追加してください
- 日本語で分かりやすく記述してください
- 例: `/// ユーザーの権限をチェックして適切な画面を表示`

## 13. 命名規則

### 変数・メソッド名
- 意味のある名前を使用してください
- 日本語のコメントで補足してください
- 例: `_canCreateRoastRecords` (焙煎記録作成可能フラグ)

## 14. プラットフォーム対応

### Web/モバイル対応
- `kIsWeb` を使用してプラットフォーム分岐を実装してください
- プラットフォーム固有の機能は適切に分離してください

## 15. アクセシビリティ

### セマンティクス
- 適切なセマンティクスラベルを使用してください
- スクリーンリーダー対応を考慮してください
---
